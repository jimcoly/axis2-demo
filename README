Apache Axis2 demo
==========
This is Apache Axis2 Demo Project.

If you want to build this project, please follow the next step.
1, checkout out parent and run: 
    git clone git@github.com:bulain/parent.git
    mvn install
2, checkout out axis2-demo:
    git clone git@github.com:bulain/axis2-demo.git
3, start with adb
    mvn clean package -Pwsdl2code-adb
    mvn eclipse:eclipse -Pwsdl2code-adb
4, start with jibx
    mvn clean package -Pwsdl2code-jibx -Pschema-codegen -Pbind
    mvn eclipse:eclipse -Pwsdl2code-jibx -Pschema-codegen
    mvn jibx:bind -Pbind
5, start with jaxbri
    mvn clean package -Pwsdl2code-jaxbri
    mvn eclipse:eclipse -Pwsdl2code-jaxbri
6, copy generated-sources/axis2/wsdl2code/resources to axis2-demo/WEB-INF/services/DemoService/META-INF
   update services.xml with the next line.
   -<parameter name="ServiceClass">com.bulain.axis2.service.demo.DemoServiceSkeleton</parameter>
   +<parameter name="ServiceObjectSupplier">org.apache.axis2.extensions.spring.receivers.SpringServletContextObjectSupplier</parameter>
   +<parameter name="SpringBeanName">demoService</parameter>
7, start Jetty
   mvn jetty:run
   mvn jetty:run -Pit
    
    
Server side Task:
1. Deploying POJOs
2. Generating the service using JAXB-RI
3. Generating the service using ADB
4. Generating the service using XMLBeans
5. Generating the service using JiBX

Client side Task:
1. Generating a client using JAXB-RI
2. Generating a client using ADB
3. Generating a client using XML Beans
4. Generating a client using JiBX

DemoService
http://localhost:8082/axis2-demo/services/DemoService?wsdl
http://localhost:8082/axis2-demo/services/DemoService/test01
http://localhost:8082/axis2-demo/services/DemoService?test01

Axis
mvn axis2-wsdl2code:wsdl2code -Pwsdl2code-adb
mvn axis2-wsdl2code:wsdl2code -Pwsdl2code-jibx
mvn axis2-wsdl2code:wsdl2code -Pwsdl2code-jaxbri
mvn axis2-wsdl2code:wsdl2code -Pwsdl2code-xmlbeans  <can't work>
mvn process-classes -P

Jibx
mvn jibx:schema-codegen -Pschema-codegen
mvn jibx:jibx2wsdl -Pjibx2wsdl
mvn jibx:bind -Pbind
mvn process-classes -P

Https Encrypt Signature
#generate server and client jks for soap
keytool -genkeypair -alias server -keyalg RSA -dname "CN=Server,OU=Development,O=Test,L=Shanghai,S=SH,C=CN" -keystore server.jks -keypass server -storepass server
keytool -selfcert -alias server -storepass server -keypass server -keystore server.jks
keytool -genkeypair -alias client -keyalg RSA -dname "CN=Client,OU=Development,O=Test,L=Shanghai,S=SH,C=CN" -keystore client.jks -keypass client -storepass client
keytool -selfcert -alias client -storepass client -keypass client -keystore client.jks
keytool -list -keystore server.jks -storepass server
keytool -list -keystore client.jks -storepass client

keytool -exportcert -alias server -file server-pub.cer -storepass server -keystore server.jks
keytool -printcert -file server-pub.cer
keytool -importcert -alias server -file server-pub.cer -storepass client -keystore client.jks -noprompt
keytool -list -keystore client.jks -storepass client

keytool -exportcert -alias client -file client-pub.cer -storepass client -keystore client.jks
keytool -printcert -file client-pub.cer
keytool -importcert -alias client -file client-pub.cer -storepass server -keystore server.jks -noprompt
keytool -list -keystore server.jks -storepass server
